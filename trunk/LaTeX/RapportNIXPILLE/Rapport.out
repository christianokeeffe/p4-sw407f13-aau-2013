\BOOKMARK [0][-]{chapter*.1}{Prolog}{}% 1
\BOOKMARK [0][-]{chapter.1}{1 Introduction}{}% 2
\BOOKMARK [0][-]{chapter.2}{2 Problem statement}{}% 3
\BOOKMARK [0][-]{chapter.3}{3 Analysis}{}% 4
\BOOKMARK [1][-]{section.3.1}{3.1 Current language}{chapter.3}% 5
\BOOKMARK [1][-]{section.3.2}{3.2 Embedded systems}{chapter.3}% 6
\BOOKMARK [1][-]{section.3.3}{3.3 Arduino platform}{chapter.3}% 7
\BOOKMARK [0][-]{chapter.4}{4 Therory}{}% 8
\BOOKMARK [1][-]{section.4.1}{4.1 Language}{chapter.4}% 9
\BOOKMARK [2][-]{subsection.4.1.1}{4.1.1 Paradigms of Programming Language}{section.4.1}% 10
\BOOKMARK [3][-]{section*.2}{Imperative Programming}{subsection.4.1.1}% 11
\BOOKMARK [3][-]{section*.3}{Functional Programming}{subsection.4.1.1}% 12
\BOOKMARK [3][-]{section*.4}{Logic Programming}{subsection.4.1.1}% 13
\BOOKMARK [3][-]{section*.5}{Object-Oriented Programming}{subsection.4.1.1}% 14
\BOOKMARK [3][-]{section*.6}{Choice of Paradigm in This Project}{subsection.4.1.1}% 15
\BOOKMARK [3][-]{section*.7}{Design Criteria in this Project}{subsection.4.1.1}% 16
\BOOKMARK [1][-]{section.4.2}{4.2 Compilers}{chapter.4}% 17
\BOOKMARK [1][-]{section.4.3}{4.3 Syntax analysis}{chapter.4}% 18
\BOOKMARK [2][-]{subsection.4.3.1}{4.3.1 Grammar}{section.4.3}% 19
\BOOKMARK [2][-]{subsection.4.3.2}{4.3.2 Lexical analyzer}{section.4.3}% 20
\BOOKMARK [1][-]{section.4.4}{4.4 Semantics}{chapter.4}% 21
\BOOKMARK [1][-]{section.4.5}{4.5 Contextual analysis}{chapter.4}% 22
\BOOKMARK [1][-]{section.4.6}{4.6 Code generation}{chapter.4}% 23
\BOOKMARK [0][-]{chapter.5}{5 Design}{}% 24
\BOOKMARK [1][-]{section.5.1}{5.1 Syntax design}{chapter.5}% 25
\BOOKMARK [1][-]{section.5.2}{5.2 Choice of grammar}{chapter.5}% 26
\BOOKMARK [1][-]{section.5.3}{5.3 Semantics of SPLAT}{chapter.5}% 27
\BOOKMARK [2][-]{subsection.5.3.1}{5.3.1 Scoping}{section.5.3}% 28
\BOOKMARK [3][-]{section*.12}{Symbol tables}{subsection.5.3.1}% 29
\BOOKMARK [2][-]{subsection.5.3.2}{5.3.2 Type Checking}{section.5.3}% 30
\BOOKMARK [1][-]{section.5.4}{5.4 Code examples}{chapter.5}% 31
\BOOKMARK [0][-]{chapter.6}{6 Implementation}{}% 32
\BOOKMARK [1][-]{section.6.1}{6.1 Known lexers and parsers}{chapter.6}% 33
\BOOKMARK [2][-]{subsection.6.1.1}{6.1.1 Lexer}{section.6.1}% 34
\BOOKMARK [3][-]{section*.15}{Lex}{subsection.6.1.1}% 35
\BOOKMARK [3][-]{section*.16}{Flex}{subsection.6.1.1}% 36
\BOOKMARK [3][-]{section*.17}{Jflex}{subsection.6.1.1}% 37
\BOOKMARK [3][-]{section*.18}{Jlex}{subsection.6.1.1}% 38
\BOOKMARK [2][-]{subsection.6.1.2}{6.1.2 Parser}{section.6.1}% 39
\BOOKMARK [3][-]{section*.19}{Yacc}{subsection.6.1.2}% 40
\BOOKMARK [3][-]{section*.20}{Cup}{subsection.6.1.2}% 41
\BOOKMARK [2][-]{subsection.6.1.3}{6.1.3 Lexer and parser}{section.6.1}% 42
\BOOKMARK [3][-]{section*.21}{SableCC}{subsection.6.1.3}% 43
\BOOKMARK [3][-]{section*.22}{ANTLR}{subsection.6.1.3}% 44
\BOOKMARK [3][-]{section*.23}{JavaCC}{subsection.6.1.3}% 45
\BOOKMARK [2][-]{subsection.6.1.4}{6.1.4 Comparison table}{section.6.1}% 46
\BOOKMARK [1][-]{section.6.2}{6.2 Scanner class creation}{chapter.6}% 47
\BOOKMARK [1][-]{section.6.3}{6.3 Parser generation}{chapter.6}% 48
\BOOKMARK [1][-]{section.6.4}{6.4 Class generator classgen}{chapter.6}% 49
\BOOKMARK [1][-]{section.6.5}{6.5 Scope and type checking}{chapter.6}% 50
\BOOKMARK [1][-]{section.6.6}{6.6 Code generation}{chapter.6}% 51
\BOOKMARK [1][-]{section.6.7}{6.7 Test/evaluation}{chapter.6}% 52
\BOOKMARK [0][-]{chapter.7}{7 Conclusion}{}% 53
\BOOKMARK [0][-]{section*.26}{Bibliography}{}% 54
\BOOKMARK [0][-]{chapter.8}{8 Appendix}{}% 55
